# 2019-11-11 Authentcation Panel

## Present

* @jaxoncreed
* @elf-pavlik
* @dmitrizagidulin

## Issues

### [Authenticating Users #27](https://github.com/solid/authentication-panel/issues/27)
 - Elf: Sometimes we don't have a clear breakdown of which token to use. The access token and the id_token have different audiences. We don't emphasize how to authenticate with the client.
 - @jaxoncreed: OP will return both id_token to authenticate with client and access_token to use with RS

### [Renaming the Standard from WebID-OIDC #29](https://github.com/solid/authentication-panel/issues/29)
 - dmitri: Names are hard. We have all kinds of options. Like "web auth", but that's taken by Web Authn. I'm open to suggestions.
 - @jaxoncreed: Do we see this scheme expanding beyond PoP, eg. using HTTP-Sig?
 - dmitri: Http-Sig could be one of possible proofs of possesion. If you look at OAuth.xyz it lists proposed PoP mechanisms. HTTP-Sig has important role to play for server to server implementations.
 - @jaxoncreed: we could call it MultiRS-OIDC, since we try to solve that multi resource problem
 - Elf: I think we need to name it, but we don't need to rush with it. And we can define clearly what we add to existing specs. Once we clarify that, then we can name it.

### [Alternative Authentication Flow #30](https://github.com/solid/authentication-panel/issues/30)
 - @jaxoncreed: I see it as essentially dead, Aaron and I cameup with it. Insteand of client having to create keypair, the AS/OP would issue access_tokens. Then it can get sent to AS/OP with RS which should have audience for that token. This adds a round trip to AS/OP to get token for request. It simplifies the client and just adds extra rounte to existing flow. Those round trips come as a downside, also the access_token gets passed around a lot. Maybe not a big problem on HTTPS.
 - Elf: It sounds like this access token is used like a refresh token. It's intended to send to the authorization server. Usually the refresh token has to be sent with client credentials. Dmitri said that browser apps don't have to use client credenials. They can use PKCE.
 - ...: I like this approach because if we want to have authorizations that are for a specific resource server, this could be very helpful. The client would get some kind of refresh tokens then use that to request specific resource servers. If we have some kind of semantic scope that can access information in a certain location. It would not leak things on other resource servers. It could just put the reference uri in the token.
 - @jaxoncreed: would it be legitimate for the client to insert this extra information, not the AS?
 - elf: If it has authorization information the client cannot take responsiblility for that.
 - ...: If there is authorization access to a specific resource, you don't want to leak that to other resource servers.
 - ...: We're talking about preventing another resource server from reusing tokens. If we use sender constrained tokens, then it cannot reuse the token. We don't need to rely on audiences if we use sender constrained tokens.
 - @jaxoncreed: For 1.0 we don't plan inlcuding any authorization information in the access_token
 - @dmitrizgidulin: We may need later at least something like, share it with anyone who has the link. We also need to discuss error handling etc.
 - ...: Authorization is still integrated in form of signature binding, OAuth2 community recognizes that we need something more than scopes. 
 - @jaxoncreed: I like the idea of using WAC on AS as well as on RS, so if we use shapes etc it should work both on RS and AS. 
 - Elf: the openid provider has authorization responsiblities. You have authorization to access certain kinds of shapes or locations, but it's going beyond OpenID connect identity provider.
 - Dmitri: But even outh2 authorization server doesn't deal with authorization.
 - Elf: the consent screen allows the client to modify scopes. So that's between the user and the authorization server.
 - Dmitri: That's still passthrough. The authorization server can still filter, but it doesn't parse those scopes.
 - Jackson: Yeah, that's the model we're proposing here. Kind of the same concept as scopes, client can propose to AS what 'kind' of access it asks for. User on consent screen decides which of requested 'kinds' of access it allows, AS stores that consent. AS uses it later for creating access_tokens which client can use with specific RS. RS technically still can disregard those authorzations from AS included in the access_token.


- Jackson: we still work on 1.0 spec
